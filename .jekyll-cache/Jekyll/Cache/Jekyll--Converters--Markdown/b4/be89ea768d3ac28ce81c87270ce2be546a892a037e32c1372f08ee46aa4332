I"£¨<style type="text/css">
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
</style>

<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [['$','$'], ['\\(','\\)']],
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'] // removed 'code' entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';
    }
});
</script>

<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="application-of-reduced-gradient---topology-optimization">Application of Reduced Gradient - Topology Optimization</h2>

<p><img src="/_images/tutorial_topopt/infill.gif" alt="Drawing" style="height: 300px;" /></p>

<h3 id="introduction">Introduction</h3>

<p>In this tutorial, you will learn to implement an optimization algorithm for 
minimizing the compliance of a structure at its equilibrium state with respect to
its topology. The tutorial is based on Dr. Sigmund‚Äôs topology optimization 
<a href="http://www.topopt.dtu.dk/?q=node/751">code</a> 
and <a href="http://www.topopt.dtu.dk/files/TopOpt88.pdf">paper</a>. The template code is attached at the end of the tutorial.</p>

<h3 id="the-compliance-minimization-problem">The compliance minimization problem</h3>
<p>Topology optimization has been commonly used to design structures and materials with optimal mechanical, 
thermal, electromagnetic, acoustical, or other properties. 
The structure under design is segmented into $n$ finite elements, and a 
density value $x_i$ is assigned to each element $i \in {1,2,‚Ä¶,n}$: A higher density corresponds to a less porous material 
element and higher Yong‚Äôs modulus. Reducing the density to zero is equivalent to creating a hole in the 
structure. Thus, the set of densities ${\bf x}={x_i}$ can be used to represent the topology of the 
structure and is considered as the variables to be optimized. A common topology optimization problem is 
compliance minimization, where we seek the ‚Äústiffest‚Äù structure within a certain volume limit to withhold 
a particular load:</p>

\[\min_{\bf x} \quad {\bf f} := {\bf u}^T {\bf K}({\bf x}) {\bf u}\]

\[\text{subject to:} \quad {\bf h} := {\bf K}({\bf x}) {\bf u} = {\bf d},\]

\[\quad {\bf g} := V(\textbf{x}) \leq v,\]

\[\textbf{x} \in [0,1].\]

<p>Here $V(\textbf{x})$ is the total volume; $v$ is an upper bound on volume; 
${\bf u} \in \mathbb{R}^{n_d\times 1}$ is the displacement of the structure under the load ${\bf d}$, 
where $n_d$ is the degrees of freedom (DOF) of the system (i.e., the number of x- and y-coordinates 
of nodes from the finite element model of the structure);
${\bf K(x)}$ is the global stiffness matrix for the structure.</p>

<p>\({\bf K(x)}\) is indirectly influenced by the topology \({\bf x}\), through the element-wise stiffness matrix</p>

\[{\bf K}_i = \bar{\bf K}_e E(x_i),\]

<p>and the local-to-global assembly:</p>

\[{\bf K(x)} = {\bf G}[{\bf K}_1,{\bf K}_2,...,{\bf K}_n],\]

<p>where the matrix $\bar{\bf K}<em>e$ is predefined according to the finite element type (we use first-order 
quadrilateral elements throughout this tutorial) and the nodal displacements of the element (we use 
square elements with unit lengths throughout this tutorial), ${\bf G}$ is an assembly matrix, $E(x_i)$ is 
the element-wise Young‚Äôs modulus defined as a function of the density $x_i$: 
$E(x_i) := \Delta E x_i^p + E</em>{\text{min}}$, where $p$ (the penalty parameter) is usually set to 3.
 This cubic relationship between the topology and the modulus 
is determined by the material constitutive models, and numerically, it 
also helps binarize the topologies, i.e., to push the optimal ${\bf x}<em>i$ to 1 or 0 (why?). 
The term $E</em>{\text{min}}$ is added to provide numerical stability.</p>

<h3 id="design-sensitivity-analysis">Design sensitivity analysis</h3>
<p>This problem has both inequality and equality constraints. However, the inequality ones are only related
to the topology $\textbf{x}$, and are either 
linear ($V(\textbf{x}) \leq v$) or simple bounds ($\textbf{x} \in [0,1]$). We will 
show that these constraints can be easily handled.
The problem thus involves two sets of variables: We can consider $\textbf{x}$ as the <strong>decision variables</strong> 
and $\textbf{u}$ as the state variables that are governed by $\textbf{x}$ through the equality constraint
${\bf K}({\bf x}) {\bf u} = {\bf d}$.</p>

<p>The reduced gradient (often called design sensitivity) can be calculated as</p>

\[\frac{df}{d{\bf x}} = \frac{\partial f}{\partial {\bf x}} - 
\frac{\partial f}{\partial {\bf u}}(\frac{\partial {\bf h}}{\partial {\bf u}})^{-1}
\frac{\partial {\bf h}}{\partial {\bf x}},\]

<p>which leads to</p>

\[\frac{df}{d{\bf x}} = -{\bf u}^T \frac{\partial {\bf K}}{\partial {\bf x}}{\bf u}.\]

<p>Recall the relation between ${\bf K}$ and ${\bf x}$, and notice that</p>

\[{\bf u}^T {\bf K}{\bf u} = \sum_{i=1}^n {\bf u}^T_i{\bf K}_i{\bf u}_i,\]

<p>i.e., the total compliance (strain energy) is the summation of element-wise compliance. 
We can further simplify the gradient as follows:</p>

\[-{\bf u}^T \frac{\partial {\bf K}}{\partial {\bf x}}{\bf u} = - \frac{\partial {\bf u}^T{\bf K}{\bf u}}{\partial {\bf x}}\]

\[= - \frac{\partial \sum_{i=1}^n {\bf u}^T_i{\bf K}_i{\bf u}_i}{\partial {\bf x}}\]

\[= [..., - \frac{\partial {\bf u}^T_i{\bf K}_i{\bf u}_i}{\partial x_i}, ...]\]

\[= [..., - {\bf u}^T_i \frac{\partial {\bf K}_i}{\partial x_i}{\bf u}_i, ...]\]

\[= [..., - {\bf u}^T_i \frac{\partial \bar{\bf K}_e \Delta E x_i^3}{\partial x_i}{\bf u}_i, ...]\]

\[= [..., - 3\Delta E x_i^2 {\bf u}^T_i \bar{\bf K}_e {\bf u}_i, ...]\]

<h3 id="the-algorithm">The algorithm</h3>
<p>The pseudo code for compliance minimization is the following:</p>

<ol>
  <li>
    <p>Problem setup (see details below)</p>
  </li>
  <li>
    <p>Algorithm setup: $\epsilon = 0.001$ (or any small positive number), $k = 0$ (counter for the iteration),
$\Delta x = 1000$ (or any number larger than $\epsilon$)</p>
  </li>
  <li>
    <p>While $norm(\Delta x) \leq \epsilon$, Do:</p>

    <p>3.1. Update the stiffness matrix ${\bf K}$ and the displacement (state) ${\bf u}$ (finite element analysis)</p>

    <p>3.2. Calculate element-wise compliance ${\bf u}^T_i \bar{\bf K}_e {\bf u}_i$</p>

    <p>3.3. Calculate partial derivatives 
 \(\frac{df}{dx_i} = - 3\Delta E x_i^2 {\bf u}^T_i \bar{\bf K}_e {\bf u}_i\)</p>

    <p>3.4. The gradient with respect to $g$ is a constant vector $[1,‚Ä¶,1]^T$</p>

    <p>3.5. Apply filter to $\frac{df}{d{\bf x}}$ (See discussion later)</p>

    <p>3.6. Update ${\bf x}$: ${\bf x}‚Äô<em>{k+1} = {\bf x}</em>{k} - \alpha_k (\frac{df}{d{\bf x}} + \mu {\bf 1})$,
 where $\mu \geq 0$ is determined as in 3.7. To ensure that the gradient descent is successful, we will either set
 $\alpha_k$ to a small value, or truncate $\Delta x = - (\frac{df}{d{\bf x}} + \mu {\bf 1})$ within a range 
 (conceptually similar to the idea of trust region).</p>

    <p>3.7. Move ${\bf x}‚Äô<em>{k+1}$ back to the feasible domain:
 If ${\bf 1}^T{\bf x}</em>{k} &lt; v$ and $-{\bf 1}^T\frac{df}{d{\bf x}}&lt;0$, then ${\bf x}‚Äô<em>{k+1}$ satisfies $g$.
  with $\mu = 0$. If ${\bf x}‚Äô</em>{k+1}$ does not satisfy $g$, we will increase $\mu$ using bisection, i.e.,
  search in $[0,\mu_{max}]$ where $\mu_{max}$ is a large positive number. Also, we 
  will truncate ${\bf x}‚Äô_{k+1}$ between 0 and 1.</p>

    <p>3.8. Update $norm(\Delta x)$, $k = k+1$</p>
  </li>
</ol>

<h3 id="implementation-details">Implementation details</h3>
<p>Some details of the template code is explained as follows:</p>

<h4 id="the-numbering-rule-for-elements-and-nodes">The numbering rule for elements and nodes</h4>
<p>The template code assumes a rectangular design domain, where each element is modeled as a unit square. 
The numbering of elements and nodes are explained in the figure below.</p>

<p><img src="/_images/tutorial_topopt/topopt881.png" alt="Drawing" style="height: 300px;" /></p>

<h4 id="input-parameters">Input parameters</h4>
<p>Inputs to the program are (1) the number of elements in the x and y directions (<code class="language-plaintext highlighter-rouge">nelx</code> and <code class="language-plaintext highlighter-rouge">nely</code>), 
(2) the volume fraction (<code class="language-plaintext highlighter-rouge">volfrac</code>, this is the number between 0 and 1 that specifies the
ratio between the volume of the target topology and the maximum volume $nelx \times nely$), (3) the penalty
parameter of the Young‚Äôs Modulus model (<code class="language-plaintext highlighter-rouge">penal</code>, usually <strong>=3</strong>), and (4) the filter radius (<code class="language-plaintext highlighter-rouge">rmin</code>, 
usually <strong>=3</strong>).</p>

<h4 id="material-properties">Material properties</h4>

<figure class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="c1">%% MATERIAL PROPERTIES</span>
<span class="n">E0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">Emin</span> <span class="o">=</span> <span class="mf">1e-9</span><span class="p">;</span>
<span class="n">nu</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span></code></pre></figure>

<p>Set the Young‚Äôs Modulus (<code class="language-plaintext highlighter-rouge">E0</code>), and the Poisson‚Äôs ratio (<code class="language-plaintext highlighter-rouge">nu</code>). Leave Emin as a small number.</p>

<h4 id="define-loadings">Define loadings</h4>

<figure class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="n">F</span> <span class="o">=</span> <span class="nb">sparse</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">nelx</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span></code></pre></figure>

<p>This line specifies the loading. Here <code class="language-plaintext highlighter-rouge">F</code> is a sparse column vector with <code class="language-plaintext highlighter-rouge">2(nely+1)(nelx+1)</code> elements.
<code class="language-plaintext highlighter-rouge">(2,1,-1,\cdots)</code> specifies that there is a force of <strong>-1</strong> at the second row and first column
of the vector. According to the numbering convention of this code, this is to say that in the y direction
of the first node, there is a downward force of magnitude 1.</p>

<h4 id="define-boundary-conditions-fixed-dofs">Define boundary conditions (Fixed DOFs)</h4>

<figure class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="n">fixeddofs</span> <span class="o">=</span> <span class="nb">union</span><span class="p">([</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)],[</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nelx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)]);</span></code></pre></figure>

<p>This line specifies the nodes with fixed DOFs. <code class="language-plaintext highlighter-rouge">[1:2:2*(nely+1)]</code> are x directions 
of all nodes to the left side of the structure, and <code class="language-plaintext highlighter-rouge">2*(nelx+1)*(nely+1)</code> is the y direction
of the last node (right bottom corner). See figure below:</p>

<p><img src="/_images/tutorial_topopt/topopt882.png" alt="Drawing" style="height: 300px;" /></p>

<h4 id="filtering-of-sensitivity-gradient">Filtering of sensitivity (gradient)</h4>
<p>Pure gradient descent may result in a topology with checkerboard patterns. See figure below. 
While mathematically sound, such a solution can be infeasible from a manufacturing perspective or 
too expensive to realize (e.g., through additive manufacturing of porous structures). Therefore, 
a smoothed solution is often more preferred.</p>

<p><img src="http://designer.mech.yzu.edu.tw/articlesystem/article/compressedfile/(2003-01-10)%20A%20review%20and%20generalization%20of%202-D%20structural%20topology%20optimization%20using%20material%20d.files/image226.jpg" alt="Drawing" style="height: 200px;" /></p>

<p>In the template we prepare a Gaussian filter, through the following code:</p>

<figure class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="c1">%% PREPARE FILTER</span>
<span class="n">iH</span> <span class="o">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">nelx</span><span class="o">*</span><span class="n">nely</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">jH</span> <span class="o">=</span> <span class="nb">ones</span><span class="p">(</span><span class="nb">size</span><span class="p">(</span><span class="n">iH</span><span class="p">));</span>
<span class="n">sH</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="nb">size</span><span class="p">(</span><span class="n">iH</span><span class="p">));</span>
<span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">nelx</span>
  <span class="k">for</span> <span class="n">j1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">nely</span>
    <span class="n">e1</span> <span class="o">=</span> <span class="p">(</span><span class="n">i1</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nely</span><span class="o">+</span><span class="n">j1</span><span class="p">;</span>
    <span class="k">for</span> <span class="n">i2</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">i1</span><span class="o">-</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">):</span><span class="nb">min</span><span class="p">(</span><span class="n">i1</span><span class="o">+</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">nelx</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">j2</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">j1</span><span class="o">-</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">):</span><span class="nb">min</span><span class="p">(</span><span class="n">j1</span><span class="o">+</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">nely</span><span class="p">)</span>
        <span class="n">e2</span> <span class="o">=</span> <span class="p">(</span><span class="n">i2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nely</span><span class="o">+</span><span class="n">j2</span><span class="p">;</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">iH</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">e1</span><span class="p">;</span>
        <span class="n">jH</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">e2</span><span class="p">;</span>
        <span class="n">sH</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">rmin</span><span class="o">-</span><span class="nb">sqrt</span><span class="p">((</span><span class="n">i1</span><span class="o">-</span><span class="n">i2</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">j1</span><span class="o">-</span><span class="n">j2</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="p">));</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">H</span> <span class="o">=</span> <span class="nb">sparse</span><span class="p">(</span><span class="n">iH</span><span class="p">,</span><span class="n">jH</span><span class="p">,</span><span class="n">sH</span><span class="p">);</span>
<span class="n">Hs</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">H</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span></code></pre></figure>

<p>The design sensitivity can then be filtered by</p>

<figure class="highlight"><pre><code class="language-matlab" data-lang="matlab">    <span class="n">dc</span><span class="p">(:)</span> <span class="o">=</span> <span class="n">H</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">(:)</span><span class="o">.*</span><span class="n">dc</span><span class="p">(:))</span><span class="o">.</span><span class="p">/</span><span class="n">Hs</span><span class="o">.</span><span class="p">/</span><span class="nb">max</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">,</span><span class="n">x</span><span class="p">(:));</span></code></pre></figure>

<h3 id="the-template-code">The template code</h3>

<figure class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="c1">%%%% Modified by Max Yi Ren (ASU) %%%%%%%%%%%%%%%%%%%%%%%</span>

<span class="c1">%%%% AN 88 LINE TOPOLOGY OPTIMIZATION CODE Nov, 2010 %%%%</span>
<span class="k">function</span> <span class="n">top88</span><span class="p">(</span><span class="n">nelx</span><span class="p">,</span><span class="n">nely</span><span class="p">,</span><span class="n">volfrac</span><span class="p">,</span><span class="n">penal</span><span class="p">,</span><span class="n">rmin</span><span class="p">,</span><span class="n">ft</span><span class="p">)</span>

<span class="c1">%% MATERIAL PROPERTIES</span>
<span class="n">E0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">Emin</span> <span class="o">=</span> <span class="mf">1e-9</span><span class="p">;</span>
<span class="n">nu</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">;</span>
<span class="c1">%% PREPARE FINITE ELEMENT ANALYSIS</span>
<span class="n">A11</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span>  <span class="mi">3</span> <span class="o">-</span><span class="mi">6</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>  <span class="mi">3</span> <span class="mi">12</span>  <span class="mi">3</span>  <span class="mi">0</span><span class="p">;</span> <span class="o">-</span><span class="mi">6</span>  <span class="mi">3</span> <span class="mi">12</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span> <span class="o">-</span><span class="mi">3</span>  <span class="mi">0</span> <span class="o">-</span><span class="mi">3</span> <span class="mi">12</span><span class="p">];</span>
<span class="n">A12</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">6</span> <span class="o">-</span><span class="mi">3</span>  <span class="mi">0</span>  <span class="mi">3</span><span class="p">;</span> <span class="o">-</span><span class="mi">3</span> <span class="o">-</span><span class="mi">6</span> <span class="o">-</span><span class="mi">3</span> <span class="o">-</span><span class="mi">6</span><span class="p">;</span>  <span class="mi">0</span> <span class="o">-</span><span class="mi">3</span> <span class="o">-</span><span class="mi">6</span>  <span class="mi">3</span><span class="p">;</span>  <span class="mi">3</span> <span class="o">-</span><span class="mi">6</span>  <span class="mi">3</span> <span class="o">-</span><span class="mi">6</span><span class="p">];</span>
<span class="n">B11</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">4</span>  <span class="mi">3</span> <span class="o">-</span><span class="mi">2</span>  <span class="mi">9</span><span class="p">;</span>  <span class="mi">3</span> <span class="o">-</span><span class="mi">4</span> <span class="o">-</span><span class="mi">9</span>  <span class="mi">4</span><span class="p">;</span> <span class="o">-</span><span class="mi">2</span> <span class="o">-</span><span class="mi">9</span> <span class="o">-</span><span class="mi">4</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>  <span class="mi">9</span>  <span class="mi">4</span> <span class="o">-</span><span class="mi">3</span> <span class="o">-</span><span class="mi">4</span><span class="p">];</span>
<span class="n">B12</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">2</span> <span class="o">-</span><span class="mi">3</span>  <span class="mi">4</span> <span class="o">-</span><span class="mi">9</span><span class="p">;</span> <span class="o">-</span><span class="mi">3</span>  <span class="mi">2</span>  <span class="mi">9</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>  <span class="mi">4</span>  <span class="mi">9</span>  <span class="mi">2</span>  <span class="mi">3</span><span class="p">;</span> <span class="o">-</span><span class="mi">9</span> <span class="o">-</span><span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">2</span><span class="p">];</span>
<span class="n">KE</span> <span class="o">=</span> <span class="mi">1</span><span class="p">/(</span><span class="mi">1</span><span class="o">-</span><span class="n">nu</span><span class="o">^</span><span class="mi">2</span><span class="p">)/</span><span class="mi">24</span><span class="o">*</span><span class="p">([</span><span class="n">A11</span> <span class="n">A12</span><span class="p">;</span><span class="n">A12</span><span class="s1">' A11]+nu*[B11 B12;B12'</span> <span class="n">B11</span><span class="p">]);</span>
<span class="n">nodenrs</span> <span class="o">=</span> <span class="nb">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">:(</span><span class="mi">1</span><span class="o">+</span><span class="n">nelx</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">nely</span><span class="p">),</span><span class="mi">1</span><span class="o">+</span><span class="n">nely</span><span class="p">,</span><span class="mi">1</span><span class="o">+</span><span class="n">nelx</span><span class="p">);</span>
<span class="n">edofVec</span> <span class="o">=</span> <span class="nb">reshape</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">nodenrs</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="k">end</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">nelx</span><span class="o">*</span><span class="n">nely</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">edofMat</span> <span class="o">=</span> <span class="nb">repmat</span><span class="p">(</span><span class="n">edofVec</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nb">repmat</span><span class="p">([</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span><span class="o">*</span><span class="n">nely</span><span class="o">+</span><span class="p">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span><span class="mi">2</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">nelx</span><span class="o">*</span><span class="n">nely</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">iK</span> <span class="o">=</span> <span class="nb">reshape</span><span class="p">(</span><span class="nb">kron</span><span class="p">(</span><span class="n">edofMat</span><span class="p">,</span><span class="nb">ones</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">'</span><span class="p">,</span><span class="mi">64</span><span class="o">*</span><span class="n">nelx</span><span class="o">*</span><span class="n">nely</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">jK</span> <span class="o">=</span> <span class="nb">reshape</span><span class="p">(</span><span class="nb">kron</span><span class="p">(</span><span class="n">edofMat</span><span class="p">,</span><span class="nb">ones</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span><span class="o">'</span><span class="p">,</span><span class="mi">64</span><span class="o">*</span><span class="n">nelx</span><span class="o">*</span><span class="n">nely</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="c1">% DEFINE LOADS AND SUPPORTS (HALF MBB-BEAM)</span>
<span class="n">F</span> <span class="o">=</span> <span class="nb">sparse</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">nelx</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
<span class="n">U</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">nelx</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
<span class="n">fixeddofs</span> <span class="o">=</span> <span class="nb">union</span><span class="p">([</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)],[</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nelx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)]);</span>
<span class="n">alldofs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">nely</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">nelx</span><span class="o">+</span><span class="mi">1</span><span class="p">)];</span>
<span class="n">freedofs</span> <span class="o">=</span> <span class="nb">setdiff</span><span class="p">(</span><span class="n">alldofs</span><span class="p">,</span><span class="n">fixeddofs</span><span class="p">);</span>

<span class="c1">%% PREPARE FILTER</span>
<span class="n">iH</span> <span class="o">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">nelx</span><span class="o">*</span><span class="n">nely</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">jH</span> <span class="o">=</span> <span class="nb">ones</span><span class="p">(</span><span class="nb">size</span><span class="p">(</span><span class="n">iH</span><span class="p">));</span>
<span class="n">sH</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="nb">size</span><span class="p">(</span><span class="n">iH</span><span class="p">));</span>
<span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">nelx</span>
  <span class="k">for</span> <span class="n">j1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="n">nely</span>
    <span class="n">e1</span> <span class="o">=</span> <span class="p">(</span><span class="n">i1</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nely</span><span class="o">+</span><span class="n">j1</span><span class="p">;</span>
    <span class="k">for</span> <span class="n">i2</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">i1</span><span class="o">-</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">):</span><span class="nb">min</span><span class="p">(</span><span class="n">i1</span><span class="o">+</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">nelx</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">j2</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">j1</span><span class="o">-</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">):</span><span class="nb">min</span><span class="p">(</span><span class="n">j1</span><span class="o">+</span><span class="p">(</span><span class="nb">ceil</span><span class="p">(</span><span class="n">rmin</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">nely</span><span class="p">)</span>
        <span class="n">e2</span> <span class="o">=</span> <span class="p">(</span><span class="n">i2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">nely</span><span class="o">+</span><span class="n">j2</span><span class="p">;</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">iH</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">e1</span><span class="p">;</span>
        <span class="n">jH</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">e2</span><span class="p">;</span>
        <span class="n">sH</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">rmin</span><span class="o">-</span><span class="nb">sqrt</span><span class="p">((</span><span class="n">i1</span><span class="o">-</span><span class="n">i2</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">j1</span><span class="o">-</span><span class="n">j2</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="p">));</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">H</span> <span class="o">=</span> <span class="nb">sparse</span><span class="p">(</span><span class="n">iH</span><span class="p">,</span><span class="n">jH</span><span class="p">,</span><span class="n">sH</span><span class="p">);</span>
<span class="n">Hs</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">H</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>

<span class="c1">%% INITIALIZE ITERATION</span>
<span class="n">x</span> <span class="o">=</span> <span class="nb">repmat</span><span class="p">(</span><span class="n">volfrac</span><span class="p">,</span><span class="n">nely</span><span class="p">,</span><span class="n">nelx</span><span class="p">);</span>
<span class="n">xPhys</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
<span class="n">loop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">change</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">%% START ITERATION</span>
<span class="k">while</span> <span class="n">change</span> <span class="o">&gt;</span> <span class="mf">0.01</span>
  <span class="n">loop</span> <span class="o">=</span> <span class="n">loop</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  
  <span class="c1">%% FE-ANALYSIS</span>
  <span class="n">K</span> <span class="o">=</span> <span class="err">?</span><span class="p">;</span>
  <span class="n">U</span><span class="p">(</span><span class="n">freedofs</span><span class="p">)</span> <span class="o">=</span> <span class="err">?</span><span class="p">;</span>
  
  <span class="c1">%% OBJECTIVE FUNCTION AND SENSITIVITY ANALYSIS</span>
  <span class="n">ce</span> <span class="o">=</span> <span class="err">?</span><span class="p">;</span> <span class="c1">% element-wise strain energy</span>
  <span class="n">c</span> <span class="o">=</span> <span class="err">?</span><span class="p">;</span> <span class="c1">% total strain energy</span>
  <span class="n">dc</span> <span class="o">=</span> <span class="err">?</span><span class="p">;</span> <span class="c1">% design sensitivity</span>
  <span class="n">dv</span> <span class="o">=</span> <span class="nb">ones</span><span class="p">(</span><span class="n">nely</span><span class="p">,</span><span class="n">nelx</span><span class="p">);</span>
  
  <span class="c1">%% FILTERING/MODIFICATION OF SENSITIVITIES</span>
  <span class="k">if</span> <span class="n">ft</span> <span class="o">==</span> <span class="mi">1</span>
    <span class="n">dc</span><span class="p">(:)</span> <span class="o">=</span> <span class="n">H</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="p">(:)</span><span class="o">.*</span><span class="n">dc</span><span class="p">(:))</span><span class="o">.</span><span class="p">/</span><span class="n">Hs</span><span class="o">.</span><span class="p">/</span><span class="nb">max</span><span class="p">(</span><span class="mf">1e-3</span><span class="p">,</span><span class="n">x</span><span class="p">(:));</span>
  <span class="k">elseif</span> <span class="n">ft</span> <span class="o">==</span> <span class="mi">2</span>
    <span class="n">dc</span><span class="p">(:)</span> <span class="o">=</span> <span class="n">H</span><span class="o">*</span><span class="p">(</span><span class="n">dc</span><span class="p">(:)</span><span class="o">.</span><span class="p">/</span><span class="n">Hs</span><span class="p">);</span>
    <span class="n">dv</span><span class="p">(:)</span> <span class="o">=</span> <span class="n">H</span><span class="o">*</span><span class="p">(</span><span class="n">dv</span><span class="p">(:)</span><span class="o">.</span><span class="p">/</span><span class="n">Hs</span><span class="p">);</span>
  <span class="k">end</span>
  
  <span class="c1">%% OPTIMALITY CRITERIA UPDATE OF DESIGN VARIABLES AND PHYSICAL DENSITIES</span>
  <span class="k">while</span> <span class="err">?</span>
    <span class="err">???</span>  
  <span class="k">end</span>
  <span class="n">change</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">xnew</span><span class="p">(:)</span><span class="o">-</span><span class="n">x</span><span class="p">(:)));</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">xnew</span><span class="p">;</span>
  
  <span class="c1">%% PRINT RESULTS</span>
  <span class="nb">fprintf</span><span class="p">(</span><span class="s1">' It.:%5i Obj.:%11.4f Vol.:%7.3f ch.:%7.3f\n'</span><span class="p">,</span><span class="n">loop</span><span class="p">,</span><span class="n">c</span><span class="p">,</span> <span class="k">...</span>
    <span class="nb">mean</span><span class="p">(</span><span class="n">xPhys</span><span class="p">(:)),</span><span class="n">change</span><span class="p">);</span>
  
  <span class="c1">%% PLOT DENSITIES</span>
  <span class="nb">colormap</span><span class="p">(</span><span class="nb">gray</span><span class="p">);</span> <span class="nb">imagesc</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">xPhys</span><span class="p">);</span> <span class="nb">caxis</span><span class="p">([</span><span class="mi">0</span> <span class="mi">1</span><span class="p">]);</span> <span class="nb">axis</span> <span class="n">equal</span><span class="p">;</span> <span class="nb">axis</span> <span class="n">off</span><span class="p">;</span> <span class="nb">drawnow</span><span class="p">;</span>
<span class="k">end</span>
<span class="c1">%</span>
<span class="c1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
<span class="c1">% This Matlab code was written by E. Andreassen, A. Clausen, M. Schevenels,%</span>
<span class="c1">% B. S. Lazarov and O. Sigmund,  Department of Solid  Mechanics,           %</span>
<span class="c1">%  Technical University of Denmark,                                        %</span>
<span class="c1">%  DK-2800 Lyngby, Denmark.                                                %</span>
<span class="c1">% Please sent your comments to: sigmund@fam.dtu.dk                         %</span>
<span class="c1">%                                                                          %</span>
<span class="c1">% The code is intended for educational purposes and theoretical details    %</span>
<span class="c1">% are discussed in the paper                                               %</span>
<span class="c1">% "Efficient topology optimization in MATLAB using 88 lines of code,       %</span>
<span class="c1">% E. Andreassen, A. Clausen, M. Schevenels,                                %</span>
<span class="c1">% B. S. Lazarov and O. Sigmund, Struct Multidisc Optim, 2010               %</span>
<span class="c1">% This version is based on earlier 99-line code                            %</span>
<span class="c1">% by Ole Sigmund (2001), Structural and Multidisciplinary Optimization,    %</span>
<span class="c1">% Vol 21, pp. 120--127.                                                    %</span>
<span class="c1">%                                                                          %</span>
<span class="c1">% The code as well as a postscript version of the paper can be             %</span>
<span class="c1">% downloaded from the web-site: http://www.topopt.dtu.dk                   %</span>
<span class="c1">%                                                                          %</span>
<span class="c1">% Disclaimer:                                                              %</span>
<span class="c1">% The authors reserves all rights but do not guaranty that the code is     %</span>
<span class="c1">% free from errors. Furthermore, we shall not be liable in any event       %</span>
<span class="c1">% caused by the use of the program.                                        %</span>
<span class="c1">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span></code></pre></figure>

<h3 id="local-density-constraint">Local density constraint</h3>
<p>Local density constraint has been discussed in <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7829422">Wu. et al</a>.
This formulation of topology optimization derives more porous-like structures
that are robust against local defects.</p>

<p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7829422">Here</a>
is an implementation of the algorithm from the paper, using an Augmented Lagrangian Method.</p>
:ET